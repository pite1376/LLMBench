---
description: 
globs: 
alwaysApply: false
---
# 项目开发规范 - AI助手执行标准

## 项目概述
这是一个基于React + TypeScript + Vite的AI模型测试平台，集成了Supabase后端和多种AI服务。主要文件结构：
- **主入口**: [src/main.tsx](mdc:src/main.tsx) - React应用入口
- **核心组件**: [src/App.tsx](mdc:src/App.tsx) - 主应用组件
- **AI服务**: [src/services/ai-service.ts](mdc:src/services/ai-service.ts) - AI模型集成
- **数据库服务**: [src/services/supabase-db.ts](mdc:src/services/supabase-db.ts) - 数据库操作
- **状态管理**: [src/store/index.ts](mdc:src/store/index.ts) - 全局状态
- **类型定义**: [src/types/index.ts](mdc:src/types/index.ts) - TypeScript类型

## 核心执行原则

### 1. 一致性至上原则
- **命名规范**: 
  - 组件使用PascalCase：`UserProfile.tsx`, `ModelSelector.tsx`
  - 服务/工具使用camelCase：`aiService.ts`, `formatters.ts`
  - 常量使用UPPER_SNAKE_CASE：`API_ENDPOINTS`, `DEFAULT_CONFIG`
  - 类型定义使用PascalCase：`AIModel`, `UserData`
- **导入顺序**: React导入 → 第三方库 → 本地组件 → 本地工具 → 类型定义
- **文件结构**: 严格按照现有的 `src/` 目录结构组织代码

### 2. 文件操作安全原则
- **修改范围控制**: 只修改与当前任务直接相关的文件
- **文件职责确认**: 修改前确认文件职责，不跨职责修改
- **重要文件保护**: 
  - [package.json](mdc:package.json) - 仅在明确需要时修改依赖
  - [vite.config.ts](mdc:vite.config.ts) - 仅在构建配置需要时修改
  - [supabase-schema.sql](mdc:supabase-schema.sql) - 数据库结构变更需特别谨慎

### 3. AI/Agent特殊处理规范
- **模型配置**: 所有AI模型配置集中在 [src/lib/models.ts](mdc:src/lib/models.ts)
- **服务抽象**: AI服务通过 [src/services/ai-service.ts](mdc:src/services/ai-service.ts) 统一管理
- **类型安全**: AI相关类型定义在 [src/types/index.ts](mdc:src/types/index.ts)
- **错误处理**: AI调用必须有完整的错误处理和降级机制

## 代码操作规范

### TypeScript/React 规范
```typescript
// 组件定义标准格式
interface ComponentProps {
  // props定义
}

export const ComponentName: React.FC<ComponentProps> = ({ prop1, prop2 }) => {
  // 组件逻辑
  return (
    // JSX
  );
};
```

### 服务层规范
- **AI服务**: 必须通过 [src/services/ai-service.ts](mdc:src/services/ai-service.ts) 调用
- **数据库操作**: 必须通过 [src/services/supabase-db.ts](mdc:src/services/supabase-db.ts) 进行
- **用户管理**: 通过 [src/services/supabase-user.ts](mdc:src/services/supabase-user.ts) 处理
- **错误处理**: 统一使用项目既定的错误处理机制

### 状态管理规范
- **全局状态**: 通过 [src/store/index.ts](mdc:src/store/index.ts) 管理
- **组件状态**: 使用React hooks进行本地状态管理
- **数据流**: 遵循单向数据流原则

## 文件创建和修改规则

### 创建新文件
1. **确认必要性**: 确认不存在相同功能的文件
2. **选择正确位置**: 按照现有目录结构放置文件
3. **遵循命名规范**: 使用项目统一的命名约定
4. **添加必要注释**: 文件头部说明文件用途和职责

### 修改现有文件
1. **理解文件职责**: 修改前完全理解文件的当前职责
2. **保持向后兼容**: 确保修改不破坏现有功能
3. **更新相关文档**: 重要修改需同步更新注释和文档
4. **类型安全**: 确保TypeScript类型定义正确

### 组件开发规范
- **使用现有组件**: 优先使用 [src/components/](mdc:src/components) 中的现有组件
- **复用性设计**: 新组件应考虑在多处使用的可能性
- **性能优化**: 使用React.memo、useMemo、useCallback等优化手段
- **可访问性**: 确保组件符合可访问性标准

## 数据和API规范

### 数据库操作
- **使用现有服务**: 通过 [src/services/supabase-db.ts](mdc:src/services/supabase-db.ts) 进行所有数据库操作
- **类型定义**: 数据库相关类型在 [src/types/supabase-db.ts](mdc:src/types/supabase-db.ts) 中定义
- **错误处理**: 所有数据库操作必须有适当的错误处理
- **性能考虑**: 避免不必要的数据库查询，使用适当的缓存策略

### AI服务集成
- **统一接口**: 所有AI模型调用通过 [src/services/ai-service.ts](mdc:src/services/ai-service.ts)
- **模型配置**: 模型相关配置在 [src/lib/models.ts](mdc:src/lib/models.ts) 中管理
- **服务降级**: 实现AI服务不可用时的降级处理
- **响应处理**: 统一处理AI服务的响应格式

## 质量保证规范

### 代码质量要求
- **TypeScript严格模式**: 确保所有代码通过TypeScript检查
- **ESLint规则**: 遵循项目的ESLint配置
- **性能考虑**: 避免不必要的重渲染和计算
- **内存管理**: 适当清理事件监听器和订阅

### 错误处理标准
- **全局错误处理**: 在应用层面捕获和处理未预期错误
- **用户友好提示**: 为用户提供清晰的错误信息
- **日志记录**: 重要操作和错误必须有日志记录
- **恢复机制**: 关键功能应有错误恢复机制

### 测试要求
- **单元测试**: 核心逻辑必须有相应的测试
- **集成测试**: API调用和数据库操作需要集成测试
- **用户体验测试**: 确保UI交互符合预期

## 安全和隐私规范

### 数据安全
- **输入验证**: 所有用户输入必须经过验证
- **SQL注入防护**: 使用参数化查询防止SQL注入
- **XSS防护**: 适当转义用户生成的内容
- **CSRF保护**: 实施CSRF保护措施

### 隐私保护
- **最小数据原则**: 只收集必要的用户数据
- **数据加密**: 敏感数据必须加密存储
- **访问控制**: 实施适当的用户权限控制
- **数据清理**: 定期清理不必要的用户数据

## 部署和维护规范

### 环境管理
- **配置分离**: 开发、测试、生产环境配置独立管理
- **敏感信息**: 敏感配置信息使用环境变量
- **版本控制**: 重要变更必须有版本标识
- **回滚准备**: 重要部署必须有回滚方案

### 监控和日志
- **性能监控**: 监控应用性能和用户体验
- **错误追踪**: 实施完整的错误追踪机制
- **用户行为**: 合理记录用户行为数据
- **系统健康**: 监控系统资源使用情况

## 特殊注意事项

### AI助手执行指南
1. **理解上下文**: 充分理解项目当前状态和用户需求
2. **最小化修改**: 用最少的修改实现目标功能
3. **保持一致性**: 确保所有修改符合项目既定标准
4. **验证完整性**: 修改后验证功能的完整性和正确性
5. **文档同步**: 重要修改需要同步更新相关文档和注释

### 常见问题处理
- **依赖冲突**: 仔细检查 [package.json](mdc:package.json) 中的依赖版本
- **类型错误**: 确保 [src/types/](mdc:src/types) 中的类型定义正确
- **构建错误**: 检查 [vite.config.ts](mdc:vite.config.ts) 和相关配置
- **运行时错误**: 使用浏览器开发工具和控制台进行调试

### 禁止操作
- **不要删除**: 未经确认不要删除任何现有文件
- **不要重构**: 不要进行大规模的代码重构
- **不要更改架构**: 不要改变项目的基本架构设计
- **不要忽略类型**: 不要忽略TypeScript类型检查错误

